
(************************************************************

Protocol: Wang Non-repudiation (A dishonest)
Version: 0.1
Created: 01/08/07	
Last Updated: 
*************************************************************)

(************************************************************
Let
-------------------------------------------------------------
L:H{A,B,T,H{C},H{K}}
EK:{Fkey,L,K}R pkT
EOO:{Feoo,L,EK}skA
EOR:{Feor,L,EK}skB
AT:{Fabt,L}skA
REC:{Frec,L,EK}skB
CON:{Fcon,L,AT}skT

Main Protocol
-------------------------------------------------------------
A>B:Feoo,A,B,T,C,H{C},EK,EOO
B>A:Feor,EOR
A>B:Fkey,K,R

Abort Protocol
-------------------------------------------------------------
A>T:Fabt,A,B,T,H{C},H{K},{AT}pkT
if recoreved then
	T>A:Feor,L,EOR
if aborted then
	T>A:Fcon,L,CON
else
	state:aborted
	issue CON.

Resolve Protocol
-------------------------------------------------------------
B>T:Frec,A,B,T,H{C},H{K},EK,EOO,EOR,REC
if any signature invalid
	stop
if aborted then
	T>B:Fabt,L,AT
if recovered then
	T>B:Fkey,L,K,R
if EK invalid
	T>B:Ferr
else
	state: recovered
	T>A:Feor,L,EOR
	T>B:Fkey,L,K,R
*************************************************************)

param attacker=active.
param traceDisplay=none.

free ch. (*open channel*)
private free rch. (*resilient channel*)

data Feoo/0. (*Evidence of origin*)
data Feor/0. (*Evidence of receipt*)
data Fkey/0. (*Evidence of key*)
data Fabt/0. (*Abort*)
data Fres/0. (*Resolve*)
data Fcon/0. (*Confirm abort*)
data Ferr/0. (*Error*)

fun host/1. (*host data binding*)
reduc getKey(host(x))=x.

fun H/1. (*secure hash functions*)

fun encrypt/2. (*symmetric key cryptography*)
reduc decrypt(encrypt(m,k),k)=m.

fun pk/1. (*asymmetriic key cryptography*)
fun pkEncrypt/2.
reduc pkDecrypt(pkEncrypt(m,pk(x)),x)=m.

fun S/2. (*digital signature*)
reduc checkS(S(m,x),pk(x))=m.

fun randEncrypt/3. (*randomised asymmetric encryption*)
reduc randDecrypt(randEncrypt(m,pk(x),r),x)=m.
reduc randRecover(randEncrypt(m,pk(x),r),x)=r. (*randomness recoverability*)

private free skA. (*private keys*)
private free skB.
private free skT.

query
	attacker: skA; (*key secrecy*)
	attacker: skB;
	attacker: skT;
	ev:sentEOR(S((Feor,H((HOST,B,T,H(encrypt(msg,K)),H(K))),randEncrypt((Fkey,H((HOST,B,T,H(encrypt(msg,K)),H(K)))),host(pk(skT)),R)),skB))
	==>ev:validEOO(S((Feoo,H((HOST,B,T,H(encrypt(msg,K)),H(K))),randEncrypt((Fkey,H((HOST,B,T,H(encrypt(msg,K)),H(K)))),host(pk(skT)),R)),skA)). (*strong fairness*)
	
(*Process B*)
let processB=
	event begin(B);
	in(ch,(=Feoo,HOST,=B,=T,C,HC,EK,EOO));
	if HC=H(C) then(
		let (=Feoo,L,=EK)=checkS(EOO,getKey(HOST)) in(
			event validEOO(EOO);
			let EOR=S((Feor,L,EK),skB) in
			(*B>A: Feor, EOR*)
			out(ch,(Feor,EOR));
			event sentEOR(EOR);
			in(ch,(=Fkey,K,R));
			if H((HOST,B,T,HC,H(K)))=L then(
				event validKey(B);
				event end(B);0
				(*can decrypt the message and confirm here*)
			)
			(*Invalid Key*)
			else(
				let REC=S((Frec,L,EK),skB) in
				(*B>T:Frec,A,B,T,H{C},H{K},EK,EOO,EOR,REC*)
				out(rch,(HOST,B,T,H(C),H(K),EK,EOO,EOR,REC));
				in(rch,(F,m));
				(*T>B:Fabt,L,AT*)
				if F=Fabt then(
					let (=L,AT)=m in
					let (=Fabt,=L)=checkS(m,getKey(HOST)) in
					event validAT(B);
					event end(B);0
				)
				(*T>B:Fkey,L,K,R*)
				else if F=Fkey then(
					let (=L,K,R)=m in
					if H((HOST,B,T,HC,H(K)))=L then(
				 		event validKey(B);
						event end(B);0
				 	)
				)
				(*T>B:Ferr*)
				else(
					event error(B);
					event end(B);0
				)
			)
		)
		(*Invalid EOO*)
		else
			event end(B)
	)
	(*Corrupt:C*)
	else
		event end(B);0.
	

(*Process TTP*)
let processT=
	event begin(T);
	in(rch,m);
	(*A>T:Fabt,A,B,T,H{C},H{K},{AT}pkT*)
	let (=Fabt,=HOSTA,=HOSTB,=T,HC,HK,AT)=m in(
		let (=Fabt,L)=checkS(AT,getKey(HOSTA)) in(
			if H((HOSTA,HOSTB,T,HC,HK))=L then(
				(*T>A:Fcon,L,{Fcon,L,AT}skT*)
				let CON=S((Fcon,L,AT),skT) in(
					out(rch,(Fcon,L,CON));
					abortedT
				)
			)
			else 
				event end(T);0
		)
		else 
			event end(T);0
	)
	(*B>T:Frec,A,B,T,H{C},H{K},EK,EOO,EOR,REC*)
	else let (=Fres,HOSTA,HOSTB,=T,HC,HK,EK,EOO,EOR,REC)=m in( 
		let (=Feoo,L,=EK)=checkS(EOO,getKey(HOSTA)) in( 
			let (=Feor,=L,=EK)=checkS(EOR,getKey(HOSTB)) in(
				let (=Fres,=L,=EK)=checkS(REC,getKey(HOSTB)) in(
					let R = randRecover(EK,skT) in ( 
						let (=Fkey,=L,K)=randDecrypt(EK,skT) in( 
							if H(K)=HK then(
								(*T->B:Fkey,L,K,R*)
								out(rch,(Fkey,L,K,R));
								recoveredT
							)
							else(
								(*T->B:Ferr*)
								out(rch,Ferr); 
								event end(T)
							)
						)
						else(
							(*T->B:Ferr*)
							out(rch,Ferr); 
							event end(T)
						)
					)
					else 
						event end(T); 0 
				)
				else 
					event end(T); 0 
			)
			else 
				event end(T);0 
		)
		else 
			event end(T);0
	)
	else
		event falseRequest(T); 
		event end(T);0. 

(*Process TTP@ state:recovered*)
let recoveredT=
	in(rch,m);
	(*A>T:Fabt,A,B,T,H{C},H{K},{AT}pkT*)
	let (=Fabt,HOSTA,HOSTB,=T,HC,HK,AT)=m in(
		let (=Fabt,L)=checkS(AT,getKey(HOSTA)) in(
			if H((HOSTA,HOSTB,T,HC,HK))=L then(
				(*T>B:Fkey,L,K,R*)
				out(rch,(Feor,L,EOR));
				event end(T);0
			)
			else 
				event end(T);0
		)
		else 
			event end(T);0
	)
	(*B>T:Frec,A,B,T,H{C},H{K},EK,EOO,EOR,REC*)
	else let (=Fres,HOSTA,HOSTB,=T,HC,HK,EK,EOO,EOR,REC)=m in(
			let (=Feoo,L,=EK)=checkS(EOO,getKey(HOSTA)) in(
				let (=Feor,=L,=EK)=checkS(EOR,getKey(HOSTB)) in(
					let (=Fres,=L,=EK)=checkS(REC,getKey(HOSTB)) in(
						let R = randRecover(EK,skT) in(
							let (=Fkey,=L,K)=randDecrypt(EK,skT) in(
								if H(K)=HK then(
									(*T>B:Fkey,L,K,R*)
									out(rch,(Fkey,L,K,R));
									event end(T);0
								)
								else(
									(*T>B:Ferr*)
									out(rch,Ferr);
									event end(T);0
								)
							)
							else(
								(*T>B:Ferr*)
								out(rch,Ferr);
								event end(T);0
							)
						)
						else
							event end(T);0
					)
					else 
						event end(T);0
				)
				else
					event end(T);0
		)
		else 
			event end(T);0
	)
	else
		event falseRequest(T);
		event end(T);0.

(*Process TTP@ state:aborted*)
let abortedT=
	in(rch,m);
	(*A>T:Fabt,A,B,T,H{C},H{K},{AT}pkT*)
	let (=Fabt,HOSTA,HOSTB,=T,HC,HK,AT)=m in(
		let (=Fabt,L)=checkS(AT,getKey(HOSTA)) in(
			if H((HOSTA,HOSTB,T,HC,HK))=L then(
				(*T>A:Fcon,L,CON*)
				out(rch,(Fcon,L,CON));
				event end(T);0
			)
			else 
				event end(T);0
		)
		else 
			event end(T);0
	)
	(*B>T:Frec,A,B,T,H{C},H{K},EK,EOO,EOR,REC*)
	else let (=Frec,HOSTA,HOSTB,=T,HC,HK,EK,EOO,EOR,REC)=m in(
		let (=Feoo,L,=EK)=checkS(EOO,getKey(HOSTA)) in(
			let (=Feor,=L,=EK)=checkS(EOR,getKey(HOSTB)) in(
				let (=Frec,=L,=EK)=checkS(REC,getKey(HOSTB)) in(
					let R = randRecover(EK,skT) in(
						let (=Fkey,=L,K)=randDecrypt(EK,skT) in(
							if H(K)=HK then(
								(*T>B:Fabt,L,AT*)
								out(rch,(Fabt,L,AT));
								event end(T);0
							)
							else(
								(*T>B:Ferr*)
								out(rch,Ferr);
								event end(T);0
							)
						)
						else(
							(*T>B:Ferr*)
							out(rch,Ferr);
							event end(T);0
						)
					)
					else event end(T);0
				)
				else event end(T);0
			)
			else event end(T);0
		)
		else event end(T);0
	)
	else
		event falseRequest(T);
		event end(T);0.
		
process
	
	(*Create and publish public keys*)
	let pkB=pk(skB) in out(ch,pkB);
	let pkT=pk(skT) in out(ch,pkT);

	(*Bind public keys to processes*)
	let B=host(pkB) in out(ch,B);
	let T=host(pkT) in out(ch,T);

	(*Begin processes*)
	processB|processT


